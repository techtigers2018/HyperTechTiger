// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7196.kenjis_mower.subsystems;


import org.usfirst.frc7196.kenjis_mower.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    enum grabState{
        OPEN, CLOSED, OPENING, CLOSING;
    }

/**
 *
 */
public class grabber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark grabbermotor;
    private DigitalInput limit_bot;
    private DigitalInput limit_top;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AnalogInput pot;
    //private grabState state, nextState;

    public grabber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        grabbermotor = new Spark(5);
        addChild("grabber motor", grabbermotor);
        grabbermotor.setInverted(false);

        pot = new AnalogInput(0);
        addChild("string_pot", pot);

        limit_bot = new DigitalInput(0);
        addChild("lim1", limit_bot);
        limit_top = new DigitalInput(1);
        addChild("lim2", limit_top);


        //state = grabState.OPENING;
        //nextState = state;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        //setDefaultCommand(new OpenGrabberCommand());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {

        SmartDashboard.putNumber("Pot Value: ", pot.getVoltage());

        // // Put code here to be run every loop
        // //check current state
        // if (state == grabState.OPENING){
        //     //do action for current state
        //     if (pot.getValue() <= 3){
        //         nextState = grabState.OPEN;
        //         grabbermotor.setSpeed(0);
        //     }
        //     grabbermotor.setSpeed(-0.5);
        // }
        // else if (state == grabState.CLOSING){
        //     if (pot.getValue() <= 56){
        //         nextState = grabState.CLOSED;
        //     }
        //     grabbermotor.setSpeed(0.5);
        // }
        // else {
        //     grabbermotor.setSpeed(0);
        // }

        // state = nextState;
        // if (justStarted) justStarted = false;
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem

    public void openGrabber(){
        //if (!limit_top.get()){
            grabbermotor.set(-0.7);
        //}   
        //else{
            //grabbermotor.set(0);
        //}
        // justStarted = true;
        // if ((state == grabState.CLOSED) || (state == grabState.CLOSING)){
        //     nextState = grabState.OPENING;
        // }
    }
    public void closeGrabber(){
        //if (!limit_bot.get()){
            grabbermotor.set(0.7);
        //}
        //else {
            //grabbermotor.set(0);
        //}
        
        // justStarted = true;
        // if ((state == grabState.OPEN) || (state == grabState.OPENING)){
        //     nextState = grabState.CLOSING;
        // }
    }

    public void getFinished(){
        //return (!justStarted && (state == grabState.OPEN || state == grabState.CLOSED));
    }
    // here. Call these from Commands.
    public void stopGrab(){
        grabbermotor.set(0);
    }
}

